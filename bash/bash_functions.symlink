#!/bin/bash
#
# Place any bash functions in here and they'll get loaded automatically. 
# Remember to update the bash_funcs method with new func. names. 
#

# Prints any methods contained in this file, provides an easy go to. 
bash_funcs () {
    echo "findhere, findall, rm_ds, dir, edit, manpdf, ziparc, extract, sshi, gblogs"
}

findhere () {
	find . -name $1
}

findall () {
    find / -name $1
}

find_dots () { 
	find ~ -name ".*" -maxdepth 1 -type l
}

rm_ds () {
 find . -name ".DS_Store" -delete
}

dir () {
    mkdir $1 && cd $1
}

edit () {
    exec "$EDITOR" "${1:-.}"
}

# Open man page as PDF without saving it anywhere. 
manpdf () {
  man -t "${1}" | open -f -a /Applications/Preview.app/
}

ziparc () {
  zip -r "$1.zip" "$1"
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

sshi () {
  ssh -i ~/.ssh/id_rsa $1
}
alias sushi='sshi'

# Display the logs of the current branch only starting with 
# last commit before the branch was created. 
gblogs () {
  git log --walk-reflogs "$(git rev-parse --abbrev-ref HEAD)"
}
