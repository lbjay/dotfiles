#!/bin/bash
#
# Place any bash functions in here and they'll get loaded automatically. 
# Remember to update the bash_funcs method with any new func. details and an 
# example command showing any args if applicable. 
#

# Prints any methods contained in this file, provides an easy go-to reference. 
bashfuncs () {
    echo ''
    echo 'Bash Functions'
    echo ''
    
    echo 'findhere - Find files in local dir with given glob e.g.'
    echo '           findhere "*.log"'
    echo 'findall  - Find all matching files on file system e.g.'
    echo '           findall "docker"'
    echo 'finddot  - Find all dotfile symlinks in the home folder e.g.'
    echo 'rmds     - Recursively remove all .DS_Store files from local dir'
    echo 'dir      - Create a dir in the local dir and cd into it e.g.'
    echo '           dir newproject'
    echo 'manpdf   - Open man page as PDF without saving it anywhere e.g.'
    echo '           manpdf ls'
    echo 'zipit    - Zip a file in the local dir e.g.'
    echo '           zipit newproject'
    echo 'extract  - Extracts archived files / mounts disk images e.g.'
    echo '           extract newproject.zip'
    echo 'sshi     - SSH using the identity file ~/.ssh/id_rsa e.g.'
    echo '           sshi user@server.com'
    echo 'sedit    - Replace all instances of x with z in file y e.g.'
    echo '           sedit "hello" "ciao" myfile.txt'
    echo 'gblogs   - Display logs of current branch starting with the last '
    echo '           commit when the branch was created'
    echo 'launch   - Launches a Mac OS X application e.g.'
    echo '           launch calculator'
    
    echo ""
}
alias shellfuncs=bashfuncs

findhere () {
	find . -name "$1"
}

findall () {
  find / -name "$1"
}
 
finddot () { 
	find ~ -name ".*" -maxdepth 1 -type l
}
 
rmds () {
  find . -name ".DS_Store" -delete
}

dir () {
  mkdir "$1" && cd "$1"
}

manpdf () {
  man -t "${1}" | open -f -a /Applications/Preview.app/
}
 
zipit () {
  zip -r "$1.zip" "$1"
}

# credit: http://nparikh.org/notes/zshrc.txt
extract () {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2)  tar -jxvf $1                        ;;
      *.tar.gz)   tar -zxvf $1                        ;;
      *.bz2)      bunzip2 $1                          ;;
      *.dmg)      hdiutil mount $1                    ;;
      *.gz)       gunzip $1                           ;;
      *.tar)      tar -xvf $1                         ;;
      *.tbz2)     tar -jxvf $1                        ;;
      *.tgz)      tar -zxvf $1                        ;;
      *.zip)      unzip $1                            ;;
      *.ZIP)      unzip $1                            ;;
      *.pax)      cat $1 | pax -r                     ;;
      *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
      *.rar)      unrar x $1                          ;;
      *.Z)        uncompress $1                       ;;
      *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

sshi () {
  ssh -i ~/.ssh/id_rsa $1
}
alias sushi='sshi'

sedit () {
	sed -ie "s/$1/$2/g" $3
}

gblogs () {
  git log --walk-reflogs "$(git rev-parse --abbrev-ref HEAD)"
}

launch () {
  open -a "$1.app"
}
