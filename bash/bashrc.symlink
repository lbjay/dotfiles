
[[ $- != *i* ]] && return

test -f ~/.bash_functions && source ~/.bash_functions
test -f ~/.bash_aliases && source ~/.bash_aliases
test -f ~/.bash_exports && source ~/.bash_exports
test -f ~/.bash_local_specific && source ~/.bash_local_specific

test -f ~/.git-completion.bash && source ~/.git-completion.bash

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if test $(which docker >/dev/null 2>&1); then
  test -f ~/.docker_functions && source ~/.docker_functions
fi

# Load ps1 behaviour e.g. prompt, colouring etc.
#if [ "$PS1" ]; then
#  test -f ~/.ps1 && source ~/.ps1
#fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/go/bin" ] ; then
    PATH="$HOME/go/bin:$PATH"
fi

# pyenv plugins
# - pyenv-doctor/
# - pyenv-installer
# - pyenv-update
# - pyenv-virtualenv
# - pyenv-virutalenvwrapper
# - pyenv-which-ext
# - python-build
if [ -d $HOME/.pyenv ]; then
		export WORKON_HOME=~/envs
		export PROJECT_HOME=~/projects
		export PYENV_ROOT="${HOME}/.pyenv"
		export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
		export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"
		eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
		. ~/.pyenv/completions/pyenv.bash
fi

if [ -d $HOME/.rbenv ]; then
		# hey dummy, don't forget to swap in compat-openssl10-devel when building new rubies
		export RBENV_ROOT="$HOME/.rbenv"
		export PATH="$RBENV_ROOT/bin:$PATH"
		eval "$(rbenv init -)"
		. ~/.rbenv/completions/rbenv.bash
fi

if [ -d $HOME/.nodenv ]; then
		export PATH="$HOME/.nodenv/bin:$PATH"
		eval "$(nodenv init -)"
fi

## If not running interactively, don't do anything
#case $- in
#    *i*) ;;
#      *) return;;
#esac

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/jluker/Downloads/google-cloud-sdk/path.bash.inc' ]; then . '/home/jluker/Downloads/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/jluker/Downloads/google-cloud-sdk/completion.bash.inc' ]; then . '/home/jluker/Downloads/google-cloud-sdk/completion.bash.inc'; fi

# tabtab source for packages
# uninstall by removing these lines
[ -f ~/.config/tabtab/__tabtab.bash ] && . ~/.config/tabtab/__tabtab.bash || true

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac

## Start PS1 Stuff

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
        && type -P dircolors >/dev/null \
        && match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
    # Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
    if type -P dircolors >/dev/null ; then
            if [[ -f ~/.dir_colors ]] ; then
                    eval $(dircolors -b ~/.dir_colors)
            elif [[ -f /etc/DIR_COLORS ]] ; then
                    eval $(dircolors -b /etc/DIR_COLORS)
            fi
    fi

    if [[ ${EUID} == 0 ]] ; then
            PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
    else
            PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
    fi

    alias ls='ls --color=auto'
    alias grep='grep --colour=auto'
    alias egrep='egrep --colour=auto'
    alias fgrep='fgrep --colour=auto'
fi

unset use_color safe_term match_lhs sh

# git prompt stuff
test -f ~/.git-prompt.sh && source ~/.git-prompt.sh
export PS1="\T"'$(git branch &>/dev/null;\
if [ $? -eq 0 ]; then \
  echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
  if [ "$?" -eq "0" ]; then \
    # @4 - Clean repository - nothing to commit
    echo "\[\033[0;32m\]"$(__git_ps1 " (%s)"); \
  else \
    # @5 - Changes to working tree
    echo "\[\033[0;91m\]"$(__git_ps1 " {%s}"); \
  fi) \[\033[1;33m\]\w\[\033[0m\]$(active_cluster)\n\$ "; \
else \
  # @2 - Prompt when not in GIT repo
  echo " \[\033[1;33m\]\w\[\033[0m\]$(active_cluster)\n\$ "; \
fi)'

if [ "$PS1" ]; then # if running interactively, then run till 'fi' at EOF:
  set -b                 # causes output from background processes to be output right away, not on wait for next primary prompt
  set bell-style visible # I hate noise
  set -o notify          # notify when jobs running in background terminate
  shopt -s cdable_vars   # set the bash option so that no '$' is required (disallow write access to terminal)
  shopt -s cdspell       # this will correct minor spelling errors in a cd command
  shopt -s checkhash
  shopt -s checkwinsize # update windows size on command
  shopt -s cmdhist      # save multi-line commands in history as single line
  shopt -s extglob      # necessary for bash completion (programmable completion)
  shopt -s histappend histreedit histverify
  shopt -s nocaseglob              # pathname expansion will be treated as case-insensitive (auto-corrects the case)
  shopt -s no_empty_cmd_completion # no empty completion (bash>=2.04 only)
  shopt -s sourcepath
  stty start undef
  stty stop undef
  ulimit -S -c 0 # (core file size) don't want any coredumps

  # completion
  COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
  complete -cf sudo

fi # end interactive checkï»¿

## END PS1 stuff

xhost +local:root > /dev/null 2>&1

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# export QT_SELECT=4

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# This gets run from ~/.xinitrc
# eval $(ssh-agent)

# eval "$(starship init bash)"
